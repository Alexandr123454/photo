{"version":3,"sources":["api/API_DATA.js","component/App.jsx","store/store.js","index.js"],"names":["loadimages","a","fetch","responseImages","json","images","App","state","toggle","handleClick","setState","response","hits","this","props","setData","from","marginTop","to","config","tension","style","className","onClick","classnames","length","map","item","src","largeImageURL","alt","tags","React","Component","connect","dispatch","data","type","value","store","createStore","action","NewApp","ReactDOM","render","document","getElementById"],"mappings":"sSACaA,EAAU,uCAAG,8BAAAC,EAAA,4DACP,sGADO,SAEKC,MADZ,uGADO,cAElBC,EAFkB,gBAGHA,EAAeC,OAHZ,cAGlBC,EAHkB,yBAKjBA,GALiB,2CAAH,qD,yBCiBjBC,G,iNAEJC,MAAQ,CACNC,QAAQ,G,EASVC,YAAc,WACZ,EAAKC,UAAS,SAAAH,GAAK,MAAK,CACtBC,QAASD,EAAMC,Y,qNAPIR,I,OAAjBW,E,OACAN,E,YAAaM,EAASC,MAC1BC,KAAKC,MAAMC,QAAQV,G,qIASX,IAAD,OAECA,EAAWQ,KAAKC,MAAhBT,OACAG,EAAWK,KAAKN,MAAhBC,OAER,OACE,kBAAC,SAAD,CACEQ,KAAM,CAAEC,WAAY,KACpBC,GAAI,CAAED,UAAW,GACjBE,OAAQ,CAAEC,QAAS,MAElB,SAAAN,GAAK,OACJ,yBAAKO,MAAOP,GACV,yBAAKQ,UAAU,eACb,4BACEA,UAAU,SACVC,QAAS,WAAO,EAAKd,gBAFvB,gBAMF,yBACEa,UAAWE,IAAW,CACpB,YAAyB,IAAXhB,EACd,YAAyB,IAAXA,KAGfH,EAAOoB,OACJpB,EAAOqB,KAAI,SAAAC,GAAI,OACb,qCACEC,IAAKD,EAAKE,cACVC,IAAKH,EAAKI,KACVT,UAAU,oBAHZ,YAIaE,IAAW,CACpB,kBAA+B,IAAXhB,EACpB,kBAA+B,IAAXA,SAI1B,qB,GAxDAwB,IAAMC,YAiETC,eA5EC,SAAA3B,GAAK,MAAK,CACxBF,OAAQE,EAAMF,WAGG,SAAA8B,GAAQ,MAAK,CAC9BpB,QAAS,SAAAqB,GAAI,OAAID,EAAS,CACxBE,KAAM,WACNC,MAAOF,QAqEIF,CAGb5B,G,8NCjFF,IAiBMiC,EAAQC,aAbE,SAACjC,EAAOkC,GACtB,OAAQA,EAAOJ,MACb,IAAK,WACH,O,yVAAO,CAAP,GACK9B,EADL,CAEEF,OAAQoC,EAAOH,QAGnB,QACE,OAAO/B,KAbQ,CACnBF,OAAQ,KAwBKqC,EANA,kBACb,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,QCtBJI,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,W","file":"static/js/main.b2e2fe75.chunk.js","sourcesContent":["\r\nexport const loadimages = async() => {\r\n  const urlImage = 'https://pixabay.com/api/?key=13764134-3a50a958250bae096f4e79b1b&q=yellow+flowers&image_type=photo  ';\r\n  const responseImages = await fetch(urlImage);\r\n  const images = await responseImages.json();\r\n\r\n  return images;\r\n};\r\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { loadimages } from '../api/API_DATA'\nimport { Spring } from 'react-spring/renderprops';\nimport classnames from 'classnames';\nimport '../style/App.css';\n\nconst getData = state => ({\n  images: state.images,\n});\n\nconst getMethods = dispatch => ({\n  setData: data => dispatch({\n    type: 'SET_DATA',\n    value: data,\n  }),\n});\n\nclass App extends React.Component {\n\n  state = {\n    toggle: true,\n  }\n\n  async componentDidMount () {\n    let response = await loadimages()\n    let images = [...response.hits]\n    this.props.setData(images) \n  }\n\n  handleClick = () => {\n    this.setState(state => ({\n      toggle: !state.toggle,\n    }))\n  }\n\n  render() {\n\n    const { images } = this.props\n    const { toggle } = this.state \n\n    return (\n      <Spring\n        from={{ marginTop: -5000 }}\n        to={{ marginTop: 0 }}\n        config={{ tension: 80 }}\n      >\n        {props => (\n          <div style={props}>\n            <div className=\"button-flex\">\n              <button \n                className=\"button\" \n                onClick={() => {this.handleClick()}}\n              >Change view\n              </button>\n            </div>\n            <div\n              className={classnames({\n                'gridImages': toggle === true,\n                'simpleView': toggle === false,\n              })}\n            >\n              {images.length \n                ? images.map(item => (\n                    <img  \n                      src={item.largeImageURL}\n                      alt={item.tags}\n                      className=\"gridImages__item\"\n                      className={classnames({\n                        'gridImages__item': toggle === true,\n                        'simpleView__item': toggle === false,\n                      })}\n                    />\n                  )) \n                : \"No images\"}\n            </div>   \n          </div>\n        )}\n      </Spring>\n    )\n  }\n}\n\nexport default connect(\n  getData,\n  getMethods\n)(App);\n","import React from 'react';\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport App from '../component/App'\r\n\r\nconst initialState = {\r\n  images: [],\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_DATA':\r\n      return {\r\n        ...state,\r\n        images: action.value,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst store = createStore(reducer, initialState)\r\n\r\nconst NewApp = () => (\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n)\r\n\r\nexport default NewApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport NewApp from './store/store';\n\nReactDOM.render(<NewApp />, document.getElementById('root'));\n\n"],"sourceRoot":""}