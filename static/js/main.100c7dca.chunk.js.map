{"version":3,"sources":["API_DATA.js","App.jsx","store.js","index.js"],"names":["loadimages","a","fetch","responseImages","json","images","App","response","hits","this","props","setData","from","marginTop","to","config","tension","style","className","length","map","item","src","largeImageURL","alt","tags","React","Component","connect","state","dispatch","data","type","value","store","createStore","action","NewApp","ReactDOM","render","document","getElementById"],"mappings":"sSACaA,EAAU,uCAAG,8BAAAC,EAAA,4DACP,sGADO,SAEKC,MADZ,uGADO,cAElBC,EAFkB,gBAGHA,EAAeC,OAHZ,cAGlBC,EAHkB,yBAKjBA,GALiB,2CAAH,qD,QCgBjBC,G,oUAGiBN,I,OAAjBO,E,OAEAF,E,YAAaE,EAASC,MAE1BC,KAAKC,MAAMC,QAAQN,G,qIAGT,IAEAA,EAAWI,KAAKC,MAAhBL,OAER,OAEE,kBAAC,SAAD,CACEO,KAAM,CAAEC,WAAY,KACpBC,GAAI,CAAED,UAAW,GACjBE,OAAQ,CAACC,QAAS,MAEnB,SAAAN,GAAK,OACJ,yBAAKO,MAAOP,GACV,yBAAKQ,UAAU,UACZb,EAAOc,OACJd,EAAOe,KAAI,SAAAC,GAAI,OACb,yBACEC,IAAKD,EAAKE,cACVC,IAAKH,EAAKI,KACVP,UAAU,oBAGd,qB,GAhCEQ,IAAMC,YAyCTC,eApDC,SAAAC,GAAK,MAAK,CACxBxB,OAAQwB,EAAMxB,WAGG,SAAAyB,GAAQ,MAAK,CAC9BnB,QAAS,SAAAoB,GAAI,OAAID,EAAS,CACxBE,KAAM,WACNC,MAAOF,QA6CIH,CAGbtB,G,8NCxDF,IAiBM4B,EAAQC,aAbE,SAACN,EAAOO,GACtB,OAAQA,EAAOJ,MACb,IAAK,WACH,O,yVAAO,CAAP,GACKH,EADL,CAEExB,OAAQ+B,EAAOH,QAGnB,QACE,OAAOJ,KAbQ,CACnBxB,OAAQ,KAwBKgC,EANA,kBACb,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,QCtBJI,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,W","file":"static/js/main.100c7dca.chunk.js","sourcesContent":["\r\nexport const loadimages = async() => {\r\n  const urlImage = 'https://pixabay.com/api/?key=13764134-3a50a958250bae096f4e79b1b&q=yellow+flowers&image_type=photo  ';\r\n  const responseImages = await fetch(urlImage);\r\n  const images = await responseImages.json();\r\n\r\n  return images;\r\n};\r\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { loadimages } from './API_DATA'\nimport { Spring, Transition, animated } from 'react-spring/renderprops';\nimport './App.css';\n\nconst getData = state => ({\n  images: state.images,\n});\n\nconst getMethods = dispatch => ({\n  setData: data => dispatch({\n    type: 'SET_DATA',\n    value: data,\n  }),\n});\n\nclass App extends React.Component {\n\nasync componentDidMount () {\n  let response = await loadimages()\n\n  let images = [...response.hits]\n\n  this.props.setData(images) // \n}\n\n  render() {\n\n    const { images } = this.props \n\n    return (\n      \n      <Spring\n        from={{ marginTop: -5000 }}\n        to={{ marginTop: 0 }}\n        config={{tension: 80}}\n      >\n      {props => (\n        <div style={props}>\n          <div className=\"images\">\n            {images.length \n              ? images.map(item => (\n                  <img  \n                    src={item.largeImageURL}\n                    alt={item.tags}\n                    className=\"images__item\"\n                  />\n                )) \n              : \"No images\"}\n          </div>   \n        </div>\n      )}\n    </Spring>\n    )\n  }\n}\n\nexport default connect(\n  getData,\n  getMethods\n)(App);\n","import React from 'react';\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport App from './App'\r\n\r\nconst initialState = {\r\n  images: [],\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_DATA':\r\n      return {\r\n        ...state,\r\n        images: action.value,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst store = createStore(reducer, initialState)\r\n\r\nconst NewApp = () => (\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n)\r\n\r\nexport default NewApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport NewApp from './store';\n\nReactDOM.render(<NewApp />, document.getElementById('root'));\n\n"],"sourceRoot":""}